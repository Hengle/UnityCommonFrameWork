//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIEventTransferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIEventTransfer), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetOnPointerClick", SetOnPointerClick);
		L.RegFunction("OnPointerClick", OnPointerClick);
		L.RegFunction("SetOnPointerEnter", SetOnPointerEnter);
		L.RegFunction("OnPointerEnter", OnPointerEnter);
		L.RegFunction("SetOnPointerExit", SetOnPointerExit);
		L.RegFunction("OnPointerExit", OnPointerExit);
		L.RegFunction("SetOnPointerDown", SetOnPointerDown);
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("SetOnPointerUp", SetOnPointerUp);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("SetactionOnInitializePotentialDrag", SetactionOnInitializePotentialDrag);
		L.RegFunction("OnInitializePotentialDrag", OnInitializePotentialDrag);
		L.RegFunction("SetOnBeginDrag", SetOnBeginDrag);
		L.RegFunction("OnBeginDrag", OnBeginDrag);
		L.RegFunction("SetOnDrag", SetOnDrag);
		L.RegFunction("OnDrag", OnDrag);
		L.RegFunction("SetOnEndDrag", SetOnEndDrag);
		L.RegFunction("OnEndDrag", OnEndDrag);
		L.RegFunction("SetOnDrop", SetOnDrop);
		L.RegFunction("OnDrop", OnDrop);
		L.RegFunction("SetOnScroll", SetOnScroll);
		L.RegFunction("OnScroll", OnScroll);
		L.RegFunction("SetOnUpdateSelected", SetOnUpdateSelected);
		L.RegFunction("OnUpdateSelected", OnUpdateSelected);
		L.RegFunction("SetOnSelect", SetOnSelect);
		L.RegFunction("OnSelect", OnSelect);
		L.RegFunction("SetOnDeselect", SetOnDeselect);
		L.RegFunction("OnDeselect", OnDeselect);
		L.RegFunction("SetOnMove", SetOnMove);
		L.RegFunction("OnMove", OnMove);
		L.RegFunction("SetOnSubmit", SetOnSubmit);
		L.RegFunction("OnSubmit", OnSubmit);
		L.RegFunction("SetOnCancel", SetOnCancel);
		L.RegFunction("OnCancel", OnCancel);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnPointerClick(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnPointerEnter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerEnter(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnPointerExit(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerExit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnPointerDown(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnPointerUp(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetactionOnInitializePotentialDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetactionOnInitializePotentialDrag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitializePotentialDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnInitializePotentialDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnBeginDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnBeginDrag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBeginDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnBeginDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnDrag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnEndDrag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnEndDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnDrop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnDrop(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnDrop(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.PointerEventData>;
			}

			obj.SetOnScroll(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnScroll(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnUpdateSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>;
			}

			obj.SetOnUpdateSelected(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnUpdateSelected(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnSelect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>;
			}

			obj.SetOnSelect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSelect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnSelect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnDeselect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>;
			}

			obj.SetOnDeselect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeselect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnDeselect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.AxisEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.AxisEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.AxisEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.AxisEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.AxisEventData>;
			}

			obj.SetOnMove(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.AxisEventData arg0 = (UnityEngine.EventSystems.AxisEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.AxisEventData));
			obj.OnMove(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnSubmit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>;
			}

			obj.SetOnSubmit(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSubmit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnSubmit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>), func) as System.Action<LuaInterface.LuaTable,UnityEngine.EventSystems.BaseEventData>;
			}

			obj.SetOnCancel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIEventTransfer obj = (UIEventTransfer)ToLua.CheckObject(L, 1, typeof(UIEventTransfer));
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.BaseEventData));
			obj.OnCancel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

